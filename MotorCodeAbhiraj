/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/

#include "stm32f30x.h"
#include "stm32f3_discovery.h"
#include <stdlib.h>

int flag=1;
uint16_t pwml, pwmr;
int l,r;

void ledconfigdir()
{
	//LED output configuration
	RCC->AHBENR |= 1<<21; //GPIO E clock enable
	RCC->AHBENR |= 1<<19; //GPIOC clock enable

	//PE8 - 17 & 16 blue HILL ASSIST
	GPIOE->MODER |= 1<<16; //01 for o/p
	//GPIOE->OTYPER is set to reset value = 0 = o/p push pull
	GPIOE->PUPDR |= 1<<17; //10 for pull down
	GPIOE->OSPEEDR |= (1<<16)|(1<<17); //11 for high speed

	//PE10 - 21 & 20 orange RECEIVE OR NOT
	GPIOE->MODER |= 1<<20; //01 for o/p
	//GPIOE->OTYPER is set to reset value = 0 = o/p push pull
	GPIOE->PUPDR |= 1<<21; //10 for pull down
	GPIOE->OSPEEDR |= (1<<20)|(1<<21); //11 for high speed

	//LEFT DIR
	//PE12 - 25 & 24 blue
		GPIOE->MODER |= 1<<24; //01 for o/p
		//GPIOE->OTYPER is set to reset value = 0 = o/p push pull
		GPIOE->PUPDR |= 1<<25; //10 for pull down
		GPIOE->OSPEEDR |= (1<<24)|(1<<25); //11 for high speed

	//RIGHT DIR
	//PE13 - 27 & 26 blue
		GPIOE->MODER |= 1<<26; //01 for o/p
		//GPIOE->OTYPER is set to reset value = 0 = o/p push pull
		GPIOE->PUPDR |= 1<<27; //10 for pull down
		GPIOE->OSPEEDR |= (1<<26)|(1<<27); //11 for high speed
}

void TimerInitE()
{
	    //PE9 TIM1 ch1 : 19&18 RIGHT PWM FRONT
		//PE11 TIM1 ch2 : 23&22 LEFT PWM FRONT

	    RCC->APB2ENR |= 1<<11; //TIMER1 clock enable
		GPIOE->MODER |= (1<<19) | (1<<23); //10 for alternate function
		//GPIOE->OTYPER is set to reset value = 0 = o/p push pull
		GPIOE->PUPDR |= (1<<19) | (1<<23); //10 for pull down
		GPIOE->AFR[1] = (1<<5); //AF2 for PE9
		GPIOE->AFR[1] |= (1<<13); //AF2 for PE11

		//TIM1->CR1 DIR bit is at reset value = 0 for up-counting mode
		//TIM1->CR1 CMS bit is at 00 for edge-aligned mode
		TIM1->CR1 |= 1<<7; //set ARPE
		TIM1->ARR = 15999; //14bits
		//TIM1->PSC = 15;
		//TIM1->BDTR LOCK[1:0] = 00 = lock off, no bit is write protected

		//TIM1->CCER CC1E & CC2E = 0 = OFF
		//TIM1->CCMR1 CC1S = 00 for output compare OC mode
		//TIM1->CCMR1 CC2S = 00 for output compare OC mode
		//for channel 1
		TIM1->CCMR1 |= (1<<3); //preload enable
		TIM1->CCMR1 |= (1<<5) | (1<<6); //PWM mode 1
		//for channel 2
		TIM1->CCMR1 |= (1<<11); //preload enable
		TIM1->CCMR1 |= (1<<13) | (1<<14); //PWM mode 1
		//TIM1->CCER CC1P & CC2P = 0 = active high
		//enabling CC1 & CC2 channels as output
		TIM1->CCER |= (1<<0) | (1<<4); //CC1 & CC2 output enable
		TIM1->BDTR = 1<<15; //MOE: Main Output Enable is set
		//MOE=1, OSSI=X, OSSR=0: When inactive, OC/OCN outputs are disabled

		//As the preload registers are transferred to the shadow registers
		//only when an update event occurs, before starting the counter,
		//you have to initialize all the registers by setting the UG bit in
		//the TIMx_EGR register
		TIM1->EGR = 1<<0;
		TIM1->CR1 |= 1<<0; //counter enable CEN
}

void TimerInitC()
{
	    //PC6 TIM8 ch1 : 13&12 RIGHT PWM BACK
		//PC7 TIM8 ch2 : 15&14 LEFT PWM BACK

	    RCC->APB2ENR |= 1<<13; //TIMER8 clock enable
		GPIOC->MODER |= (1<<13) | (1<<15); //10 for alternate function
		//GPIOC->OTYPER is set to reset value = 0 = o/p push pull
		GPIOC->PUPDR |= (1<<13) | (1<<15); //10 for pull down
		GPIOC->AFR[0] = (1<<26); //AF4 for PC6
		GPIOC->AFR[0] |= (1<<30); //AF4 for PC7

		//TIM8->CR1 DIR bit is at reset value = 0 for up-counting mode
		//TIM8->CR1 CMS bit is at 00 for edge-aligned mode
		TIM8->CR1 |= 1<<7; //set ARPE
		TIM8->ARR = 15999; //14bits
		//TIM8->PSC = 15;
		//TIM8->BDTR LOCK[1:0] = 00 = lock off, no bit is write protected

		//TIM8->CCER CC1E & CC2E = 0 = OFF
		//TIM8->CCMR1 CC1S = 00 for output compare OC mode
		//TIM8->CCMR1 CC2S = 00 for output compare OC mode
		//for channel 1
		TIM8->CCMR1 |= (1<<3); //preload enable
		TIM8->CCMR1 |= (1<<5) | (1<<6); //PWM mode 1
		//for channel 2
		TIM8->CCMR1 |= (1<<11); //preload enable
		TIM8->CCMR1 |= (1<<13) | (1<<14); //PWM mode 1
		//TIM1->CCER CC1P & CC2P = 0 = active high
		//enabling CC1 & CC2 channels as output
		TIM8->CCER |= (1<<0) | (1<<4); //CC1 & CC2 output enable
		TIM8->BDTR = 1<<15; //MOE: Main Output Enable is set
		//MOE=1, OSSI=X, OSSR=0: When inactive, OC/OCN outputs are disabled

		//As the preload registers are transferred to the shadow registers
		//only when an update event occurs, before starting the counter,
		//you have to initialize all the registers by setting the UG bit in
		//the TIMx_EGR register
		TIM8->EGR = 1<<0;
		TIM8->CR1 |= 1<<0; //counter enable CEN
}

void UartReceive()
{
	//PC11 UART4_RX : 23&22

	//GPIO initialization

	RCC->APB1ENR = 1<<19; //UART4 clock enable
	//RCC->CFGR3 |= (1<<20) | (1<<21); //UART4 at HSI
	RCC->CFGR3 |= (1<<20); //UART4 at system clock

	GPIOC->MODER |= (1<<23); //10 for alternate function
	//GPIOC->OTYPER is set to reset value = 0 = o/p push pull
	GPIOC->OSPEEDR |= (1<<23) | (1<<22); //11 for high speed
	GPIOC->PUPDR |= (1<<23); //10 for pull down
	GPIOC->AFR[1] |= (1<<14) | (1<<12); //AF5 for PC11

	//Receiver code

	//UART4->CR1 UE = 0 = UART disabled
	//UART4->CR1 M[1:0] = 00 = 1 start bit, 8 data bits
	//UART4->CR1 PCE = 0 = parity control disabled
	//UART4->CR1 OVER8 = 0 = over sampling by 16
	//UART4->CR1 = 1<<5; //interrupt for RXNE

	//UART4->CR2 ABREN = 0 = auto baud rate detection disabled
	//UART4->CR2 STOP[1:0] = 00 = 1 stop bit
	//UART4->CR2 CLKEN = 0 = clock pin disabled
	//UART4->CR2 = 1<<19; //MSB is sent first
	/*
	//Receiver timeout
	UART4->CR2 |= 1<<23; //receiver timeout enable
	UART4->CR1 |= 1<<26; //interrupt for receiver timeout
	UART4->RTOR = 0x00000FFF;
	//UART4->CR1 |= 1<<27; //end of block interrupt enable
	*/
	//UART4->CR3 = 1<<12; //overrun disable

	UART4->BRR = 0x271; //115200

	UART4->CR1 |= 1<<0; //UART enabled
	//UART4->CR1 TE = 0 = transmitter disabled
	UART4->CR1 |= 1<<2; //Receiver enabled
	//UART4->CR1 = (1<<0) | (1<<2);
}

char getvalue()
{
	char data;
	long ci=0;
	while(!(UART4->ISR & (1<<5)))
	{
		ci++;
		if(ci>1000000)
		{
			GPIOE->ODR &= ~(1<<10); //low
			break;
		}
	}
	if(ci>1000000)
	{
		flag=0;
	}
	else
	{
		data = UART4->RDR;
		GPIOE->ODR |= (1<<10); //high
		flag=1;
	}
	return data;
}

void shut()
{
	GPIOE->ODR &=~(1<<13); //low
	GPIOE->ODR &=~(1<<12); //low
	TIM1->CCR1 = 0;
	TIM1->CCR2 = 0;
	TIM8->CCR1 = 0;
	TIM8->CCR2 = 0;
}

void directionl(char z)
{
	if(z == 'n')
	{
		GPIOE->ODR &=~(1<<12); //low
	}
	else
	{
		GPIOE->ODR |=~(1<<12); //low
	}
}

void directionr(char z)
{
	if(z == 'n')
	{
		GPIOE->ODR &=~(1<<13); //low
	}
	else
	{
		GPIOE->ODR |=~(1<<13); //low
	}
}

void motorcode()
{
	TIM1->CCR1 = pwmr; //right
	TIM1->CCR2 = pwml; //left
	TIM8->CCR1 = pwmr; //right
	TIM8->CCR2 = pwml; //left
}

int main(void)
{
	ledconfigdir();
	TimerInitE();
	TimerInitC();
	UartReceive();
	//NVIC_EnableIRQ(UART4_IRQn);
	int c=0;
	char d;

	while(1)
	{
		if(c>1000)
			shut();
		d = getvalue();
		if(flag==1)
		{
			c=0;
					if(d=='l')
					{
						directionl(getvalue());
						pwml = (getvalue()-'0')*10000 + (getvalue()-'0')+1000 + (getvalue()-'0')*100 + (getvalue()-'0')*10 + (getvalue()-'0')*1;
					}
					else
					{
						//shut();
						continue;
					}

					if(d=='r')
					{
						directionr(getvalue());
						pwmr = (getvalue()-'0')*10000 + (getvalue()-'0')+1000 + (getvalue()-'0')*100 + (getvalue()-'0')*10 + (getvalue()-'0')*1;
					}
					else
					{
						//shut();
						continue;
					}

					motorcode();
		}
		else
		{
			c++;
		}
	}
	return 0;
}
